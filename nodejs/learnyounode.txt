1. hello: hello.js
2. baby steps: baby.js
	process
3. my first IO: file.js
	require("fs")
	fs.readFileSync: (Buffer数据)流数据, toString转换为String
4. my first async IO:
	fs.readFile(fileName,callback);
5. filtered fs: dirSync.js
	var fs = require("fs"), path = require("path"), extname = process.argv[3];
	fs.readdir(process.argv[2],function(err,files){
		for(var i=0,len=files.length; i<len; i++) {
			if(path.extname(files[i])==="."+extname) {
				console.log(files[i]);
			}
		}
	});
6. make it module:
	module.exports = function( dir, filefilter, callback ) {
		fs.readdir(dir, function(err, list) {
			if (err)
			  return callback(err)

			list = list.filter(function (file) {//EMCAScript 5:IE9以下不支持
			  return path.extname(file) === '.' + filefilter
			})

			callback(null, list)
		});
	}
7. http client: httpClient.js
	TODO: response.on(...)
	require("http")
	http.get(process.argv[2], function (response) {
	  response.setEncoding('utf8');
	  response.on('data', console.log);
	  response.on('error', console.error);
	})
8. http collect: httpCollect.js
	response.on("data", ...): 在请求数据量大时会触发多次
	response.on("end", function(){
		//TODO: 返回数据
	});
9. juggling async: jugglingAsync.js
	请求多个url
10. time server: timeServer.js
	require("net"); 
	net.createServer(function(){...})
	server.listen(port)
11. http file server: fileServer.js
	response.writeHead(...)
	data = fs.createReadStream(...)
	data.pipe( response );
12. http uppercaserver: Uppsercaserver.js
	将request中的参数转换为大写
	require("through2-map")
	req.pipe(map(function (chunk) {
		return chunk.toString().toUpperCase();
	})).pipe(res);
13. http json api server: 
	JSON.stringify({"xxx":"zx"...})