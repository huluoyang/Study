fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

fdsghdkg

范德萨分公司的给

房东是个符号

规范的过
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});
/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});

/**
 * learnyounode 6: make it module
 * create on 2014/11/06 nhn
 *   node fileFilterModuleTest.js "f:/projects/nodejs/" "txt"
 *   :__require__: fileFilterListModule
 */
var module = require("./fileFilterListModule.js");

module(process.argv[2],process.argv[3],function(err, list){
	if(err) {//error
		return console.error( err );
	}
	list.forEach(function(file){
		console.log(file);
	});
});


cluster.settings

cluster.isMaster
cluster.isWorker
Event: "fork"
Event: 'online'
Event: 'listening'
Event: 'disconnect'
Event: 'exit'
Event: 'setup'
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
Class: Worker
	worker.id
	worker.process
	worker.suicide
	worker.send(message, [sendHandle])
	worker.kill([signal='SIGTERM'])
	worker.disconnect()
	Event: 'message'
	Event: 'online'
	Event: 'listening'
	Event: 'disconnect'
	Event: 'exit'
	Event: 'error'cluster.settings

                  cluster.isMaster
                  cluster.isWorker
                  Event: "fork"
                  Event: 'online'
                  Event: 'listening'
                  Event: 'disconnect'
                  Event: 'exit'
                  Event: 'setup'
                  cluster.setupMaster([settings])
                  cluster.fork([env])
                  cluster.disconnect([callback])
                  cluster.worker
                  cluster.workers
                  Class: Worker
                  	worker.id
                  	worker.process
                  	worker.suicide
                  	worker.send(message, [sendHandle])
                  	worker.kill([signal='SIGTERM'])
                  	worker.disconnect()
                  	Event: 'message'
                  	Event: 'online'
                  	Event: 'listening'
                  	Event: 'disconnect'
                  	Event: 'exit'
                  	Event: 'error'cluster.settings

                                  cluster.isMaster
                                  cluster.isWorker
                                  Event: "fork"
                                  Event: 'online'
                                  Event: 'listening'
                                  Event: 'disconnect'
                                  Event: 'exit'
                                  Event: 'setup'
                                  cluster.setupMaster([settings])
                                  cluster.fork([env])
                                  cluster.disconnect([callback])
                                  cluster.worker
                                  cluster.workers
                                  Class: Worker
                                  	worker.id
                                  	worker.process
                                  	worker.suicide
                                  	worker.send(message, [sendHandle])
                                  	worker.kill([signal='SIGTERM'])
                                  	worker.disconnect()
                                  	Event: 'message'
                                  	Event: 'online'
                                  	Event: 'listening'
                                  	Event: 'disconnect'
                                  	Event: 'exit'
                                  	Event: 'error'cluster.settings

                                                  cluster.isMaster
                                                  cluster.isWorker
                                                  Event: "fork"
                                                  Event: 'online'
                                                  Event: 'listening'
                                                  Event: 'disconnect'
                                                  Event: 'exit'
                                                  Event: 'setup'
                                                  cluster.setupMaster([settings])
                                                  cluster.fork([env])
                                                  cluster.disconnect([callback])
                                                  cluster.worker
                                                  cluster.workers
                                                  Class: Worker
                                                  	worker.id
                                                  	worker.process
                                                  	worker.suicide
                                                  	worker.send(message, [sendHandle])
                                                  	worker.kill([signal='SIGTERM'])
                                                  	worker.disconnect()
                                                  	Event: 'message'
                                                  	Event: 'online'
                                                  	Event: 'listening'
                                                  	Event: 'disconnect'
                                                  	Event: 'exit'
                                                  	Event: 'error'cluster.settings

                                                                  cluster.isMaster
                                                                  cluster.isWorker
                                                                  Event: "fork"
                                                                  Event: 'online'
                                                                  Event: 'listening'
                                                                  Event: 'disconnect'
                                                                  Event: 'exit'
                                                                  Event: 'setup'
                                                                  cluster.setupMaster([settings])
                                                                  cluster.fork([env])
                                                                  cluster.disconnect([callback])
                                                                  cluster.worker
                                                                  cluster.workers
                                                                  Class: Worker
                                                                  	worker.id
                                                                  	worker.process
                                                                  	worker.suicide
                                                                  	worker.send(message, [sendHandle])
                                                                  	worker.kill([signal='SIGTERM'])
                                                                  	worker.disconnect()
                                                                  	Event: 'message'
                                                                  	Event: 'online'
                                                                  	Event: 'listening'
                                                                  	Event: 'disconnect'
                                                                  	Event: 'exit'
                                                                  	Event: 'error'cluster.settings

                                                                                  cluster.isMaster
                                                                                  cluster.isWorker
                                                                                  Event: "fork"
                                                                                  Event: 'online'
                                                                                  Event: 'listening'
                                                                                  Event: 'disconnect'
                                                                                  Event: 'exit'
                                                                                  Event: 'setup'
                                                                                  cluster.setupMaster([settings])
                                                                                  cluster.fork([env])
                                                                                  cluster.disconnect([callback])
                                                                                  cluster.worker
                                                                                  cluster.workers
                                                                                  Class: Worker
                                                                                  	worker.id
                                                                                  	worker.process
                                                                                  	worker.suicide
                                                                                  	worker.send(message, [sendHandle])
                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                  	worker.disconnect()
                                                                                  	Event: 'message'
                                                                                  	Event: 'online'
                                                                                  	Event: 'listening'
                                                                                  	Event: 'disconnect'
                                                                                  	Event: 'exit'
                                                                                  	Event: 'error'cluster.settings

                                                                                                  cluster.isMaster
                                                                                                  cluster.isWorker
                                                                                                  Event: "fork"
                                                                                                  Event: 'online'
                                                                                                  Event: 'listening'
                                                                                                  Event: 'disconnect'
                                                                                                  Event: 'exit'
                                                                                                  Event: 'setup'
                                                                                                  cluster.setupMaster([settings])
                                                                                                  cluster.fork([env])
                                                                                                  cluster.disconnect([callback])
                                                                                                  cluster.worker
                                                                                                  cluster.workers
                                                                                                  Class: Worker
                                                                                                  	worker.id
                                                                                                  	worker.process
                                                                                                  	worker.suicide
                                                                                                  	worker.send(message, [sendHandle])
                                                                                                  	worker.kill([signal='SIGTERM'])
                                                                                                  	worker.disconnect()
                                                                                                  	Event: 'message'
                                                                                                  	Event: 'online'
                                                                                                  	Event: 'listening'
                                                                                                  	Event: 'disconnect'
                                                                                                  	Event: 'exit'
                                                                                                  	Event: 'error'

