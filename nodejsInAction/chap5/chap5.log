第5章 存储Node程序中的数据

	选择数据存储机制的要素:
		1). 存储什么数据;
		2). 为了保证性能, 要有多快的数据读取和写入速度;
		3). 有多少数据;
		4). 要怎么查询数据;
		5). 数据要保存多久, 多可靠性有什么要求.

5.1 无服务器的数据存储(P88)

    5.1.1 内存存储(P88)
        内存存储的理想用途是存放少量经常使用的数据.

    5.1.2 基于文件的存储(P88)
		基于文件的存储主要用于存放配置信息.
		
5.2 关系型数据库管理系统(P91)

    5.2.1 MySQL(P91)
        #代码不能运行

    5.2.2 PostgreSQL(P99)

5.3 NoSQL(P100)

    4.3.1 创建一个静态文件服务器(P73)
        用stream.pipe()优化数据传输. 所有一个createReadStream都能接入任何一个WritableStream中.

    4.3.2 处理服务器错误(P77)
        在Node中, 所有继承了EventEmitter的类都可能会触发error事件.

    4.3.3 用fs.stat()实现先发制人的错误处理(P77)
        *fs.stat(path, func)会在文件不存在时返回err.code('ENOENT')

4.4 从表单中接受用户输入(P78)

    4.4.1 处理提交的表单域(P78)
        表单提交请求带的Content-Type通常有两种:
            1). application/x-www-form-urlencoded: HTML表单的默认值;
            2). multipart/form-data: 在表单中含有文件或非ASCII或二进制数据时使用.
        *解决response乱码问题: res.setHeader('Content-Type', 'text/html;charset=UTF-8');

    4.4.2 用formidable处理上传的文件(P81)

    4.4.3 计算上传进度(P84)
        formidable.on('progress', function(received, expected){})

4.5 用HTTPS加强程序的安全性(P85)
    OpenSSL生成私钥. openssl genrsa 1024 > key.pem
    创建证书需要私钥: openssl req -x509 -new -key ken.pem > key-cert.pem