第5章 存储Node程序中的数据

	选择数据存储机制的要素:
		1). 存储什么数据;
		2). 为了保证性能, 要有多快的数据读取和写入速度;
		3). 有多少数据;
		4). 要怎么查询数据;
		5). 数据要保存多久, 多可靠性有什么要求.

5.1 无服务器的数据存储(P88)

    5.1.1 内存存储(P88)
        内存存储的理想用途是存放少量经常使用的数据.

    5.1.2 基于文件的存储(P88)
		基于文件的存储主要用于存放配置信息.
		
5.2 关系型数据库管理系统(P91)

    5.2.1 MySQL(P91)
        #代码不能运行

    5.2.2 PostgreSQL(P99)

5.3 NoSQL(P100)

    5.3.1 Redis(P101)
		适合处理不需要长期访问的简单的数据存储, 如短信和游戏中的数据. 
		Redis把数据存放在RAM中, 在磁盘中记录数据的变化. 
		优点: 数据操作非常快.
		缺点: 存储空间有限, 崩溃导致数据丢失. 但可以从磁盘文件中恢复.

    5.3.2 MongoDB(P105)
        在Node中, 所有继承了EventEmitter的类都可能会触发error事件.
		(1).连接MongoDB
			var mongodb = require('mongodb');
			var server = new mongodb.Server('127.0.0.1', 27017, {});
			var client = new mongodb.Db('mydatabase', server, {w: 1});
		(2).访问MongoDB集合
			client.open(function(err){
				if (err) throw err;
				
				client.collection('test_insert', function (err, collection) {
					if (err) throw err;
					
					console.log('We are now able to perform queries.');
				});
			});
		(3).将文档插入集合中
			client.insert(
				{'title':'zdsfs', 'zds':'afdsfasafsfas'},
				{safe: true},
				function (err, documents) {
					if (err) throw err;
					
					console.log('Document ID is: ' + documents[0]._id);
				}
			)
		(4).用文档ID更新数据
			var _id = new client.bson_serializer.ObjectID('4e650d344ac74b5a01000001');
			
			collection.update(
				{_id: _id},
				{$set: {'title':'I ate too much cake.'}},
				{safe: true},
				function (err) {
					if (err) throw err;
				}
			);
		(5).搜索文档
			collection.find({'title':'I like cake'}).toArray(function(err, results){
				if (err) throw err;
				
				console.log(results);
			});
		(6).删除文档
			var _id = new client.bson_serializer.ObjectID('54a9ecf3f26bfc9c14457130');
			
			collection.remove({_id:_id}, {safe: true}, function (err) {
				if (err) throw err;
			});

    5.3.3 Mongoose(P107)
        ------

5.4 小结(P109)
	
	